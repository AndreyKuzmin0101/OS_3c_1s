#! /usr/bin/env python3

import os
import random
import signal
import sys

s = 0

def handle_usr1_signal(signum, frame):
	os.write(2, f"Processed {s} lines\n".encode())

def close_descriptors(pipeA, pipeB, pipeC):
	os.close(pipeA[0])
	os.close(pipeA[1])
	os.close(pipeB[0])
	os.close(pipeB[1])
	os.close(pipeC[0])
	os.close(pipeC[1])

def main():
	global s

	pipeA = os.pipe()
	pipeB = os.pipe()
	pipeC = os.pipe()

	p1 = os.fork()
	if p1 == 0:
		os.dup2(pipeA[1], 1)
		close_descriptors(pipeA, pipeB, pipeC)
		random_number = random.randint(120, 180)
		generator_path = './generator'
		os.execv(generator_path, [generator_path, str(random_number)])

	p2 = os.fork()
	if p2 == 0:
		os.dup2(pipeB[0], 0)
		os.dup2(pipeC[1], 1)
		close_descriptors(pipeA, pipeB, pipeC)
		bc_path = '/usr/bin/bc'
		os.execv(bc_path, [bc_path])

	os.close(pipeA[1])
	os.close(pipeC[1])
	os.close(pipeB[0])
	signal.signal(signal.SIGUSR1, handle_usr1_signal)
	while True:
		expression = os.read(pipeA[0], 1024).decode()
		if not expression:
			os.kill(p2, signal.SIGTERM)
			os.wait()
			os.wait()
			os._exit(0)
		else:
			os.write(pipeB[1], (expression + '\n').encode())
			result = os.read(pipeC[0], 1024)
			os.write(1, (expression + ' = ' + result.decode()).encode())
			s = s + 1


if __name__ == '__main__':
	main()
